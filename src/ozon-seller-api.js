// ozon-seller-api.js

let apiKey = null;
let clientId = null;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π fetch –¥–ª—è –≤—Å–µ–≥–æ –º–æ–¥—É–ª—è
const fetchImpl = require('node-fetch');

const fs = require('fs');
const path = require('path');

// –ü—É—Ç—å –∫ –ª–æ–≥-—Ñ–∞–π–ª—É
const LOG_FILE_PATH = path.join(__dirname, 'differences.log');

// –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª
function logToFile(message) {
  const timestamp = new Date().toISOString();
  const fullMessage = `[${timestamp}] ${message}\n`;
  fs.appendFileSync(LOG_FILE_PATH, fullMessage, 'utf8');
}

// memory for storing differences by comparison key // –ø–∞–º—è—Ç—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ª–∏—á–∏–π –ø–æ –∫–ª—é—á—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
let differencesMemory = {};

/**
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç API –∫–ª—é—á –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
 * Sets the API key for request authorization
 * 
 * @param {string} key - API –∫–ª—é—á, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ Ozon / API key from Ozon personal account
 * @throws {Error} –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω / If key is not provided
 */
function useApi(key) {
  if (!key) throw new Error('API –∫–ª—é—á –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω / API key is required');
  apiKey = key;
}

/**
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Client ID –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
 * Sets the Client ID for request authorization
 * 
 * @param {string} id - Client ID, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ Ozon / Client ID from Ozon personal account
 * @throws {Error} –ï—Å–ª–∏ ID –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω / If ID is not provided
 */
function useClientId(id) {
  if (!id) throw new Error('Client ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω / Client ID is required');
  clientId = id;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫—É
 * Gets the list of supply orders
 * 
 * @param {number} [limit=100] - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ / Maximum number of orders in response
 * @param {number} [supplyOrderId=0] - ID –∑–∞–∫–∞–∑–∞, –Ω–∞—á–∏–Ω–∞—è —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ / Order ID to start listing from
 * @param {Function} [callback] - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ / Callback function to process the result
 * @returns {Promise<Object>} –û–±—ä–µ–∫—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∑–∞–ø—Ä–æ—Å–∞ / Object with request results
 * @throws {Error} –ï—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã apiKey –∏ clientId / If apiKey and clientId are not set
 */
async function getSupplyOrderList(limit = 100, supplyOrderId = 0, callback) {
  if (!apiKey || !clientId) throw new Error('apiKey –∏ clientId –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã —á–µ—Ä–µ–∑ useApi –∏ useClientId / apiKey and clientId must be set using useApi and useClientId');
  if (limit > 100) {
    console.warn('–ü—Ä–µ–≤—ã—à–µ–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ 100 / Maximum request limit exceeded. Set to 100');
    limit = 100;
  }
  const url = 'https://api-seller.ozon.ru/v2/supply-order/list';
  const body = {
    filter: { states: ["ORDER_STATE_DATA_FILLING"] },
    paging: { from_supply_order_id: supplyOrderId, limit: limit }
  };
  const res = await fetchImpl(url, {
    method: 'POST',
    headers: {
      'Client-Id': clientId,
      'Api-Key': apiKey,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(body),
  });
  const data = await res.json();
  if (callback) callback(data);
  return data;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–∞–π–º—Å–ª–æ—Ç—ã –¥–ª—è –º–∞—Å—Å–∏–≤–∞ ID –∑–∞–∫–∞–∑–æ–≤ —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
 * Gets timeslots for an array of order IDs with rate limiting
 * 
 * @param {string[]} ids - –ú–∞—Å—Å–∏–≤ ID –∑–∞–∫–∞–∑–æ–≤ / Array of order IDs
 * @param {number} rps - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É default 5 / Requests per second default 5
 * @returns {Promise<Object[]>} –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å —Ç–∞–π–º—Å–ª–æ—Ç–∞–º–∏ / Array of objects with timeslots
 * @throws {Error} –ï—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã apiKey –∏ clientId / If apiKey and clientId are not set
 */
async function getTimeslotsForIds(ids, rps = 5) {
  if (!apiKey || !clientId) throw new Error('apiKey –∏ clientId –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã —á–µ—Ä–µ–∑ useApi –∏ useClientId / apiKey and clientId must be set using useApi and useClientId');
  const url = 'https://api-seller.ozon.ru/v1/supply-order/timeslot/get';
  const delay = 1000 / rps;
  const results = [];
  for (let i = 0; i < ids.length; i++) {
    const body = { supply_order_id: ids[i] };
    const res = await fetchImpl(url, {
      method: 'POST',
      headers: {
        'Client-Id': clientId,
        'Api-Key': apiKey,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(body),
    });
    const data = await res.json();
    results.push(data);
    if (i < ids.length - 1) await new Promise(r => setTimeout(r, delay));
  }
  return results;
}

/**
 * –ì–ª—É–±–æ–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –∑–Ω–∞—á–µ–Ω–∏–π
 * @param {*} a 
 * @param {*} b 
 * @returns {boolean}
 */
function deepEqual(a, b) {
  if (a === b) return true;
  if (typeof a !== typeof b || a === null || b === null) return false;

  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    return a.every((el, i) => deepEqual(el, b[i]));
  }

  if (typeof a === 'object') {
    // –î–ª—è —Ç–∞–π–º—Å–ª–æ—Ç–æ–≤ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—è from –∏ to
    if (a.from && a.to && b.from && b.to) {
      return a.from === b.from && a.to === b.to;
    }
    
    const keysA = Object.keys(a);
    const keysB = Object.keys(b);
    if (keysA.length !== keysB.length) return false;

    return keysA.every(key => deepEqual(a[key], b[key]));
  }

  return false;
}

/**
 * –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –º–∞—Å—Å–∏–≤ —Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º —Ä–∞–Ω–µ–µ, —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
 * @param {Object[]} originalArray - –ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ (–ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API)
 * @param {Object[]} currentArray - –¢–µ–∫—É—â–∏–π –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ (–Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API)
 * @param {string} comparisonKey - –ö–ª—é—á, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö—Ä–∞–Ω–∏—Ç—Å—è –æ—Ä–∏–≥–∏–Ω–∞–ª
 * @param {number|string} [logId=0] - ID –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns {{ added: Object[], removed: Object[] }} –û—Ç–ª–∏—á–∏—è
 */
function compareTimeslotObjects(originalObj, currentObj, comparisonKey = 'default', logId = 0) {
  if (!currentObj) throw new Error('currentObj –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω /  currentObj are required');
  if (currentObj.code) throw new Error(`–û—Ç–≤–µ—Ç –∞–ø–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–¥ –æ—à–∏–±–∫–∏ ${currentObj.code}: ${currentObj.message} / API response contains error code ${currentObj.code}: ${currentObj.message}`);
  let originalArray;
  let compareWith;
  const currentArray = currentObj.timeslots;
  if(originalObj) originalArray = originalObj.timeslots;

  // –ï—Å–ª–∏ –∫–ª—é—á–∞ –µ—â—ë –Ω–µ—Ç ‚Äî –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞–º—è—Ç—å —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –º–∞—Å—Å–∏–≤–æ–º
  if (!differencesMemory[comparisonKey]) {
    compareWith = originalArray || [];
    differencesMemory[comparisonKey] = {
      original: originalArray || [],
      history: [],
      current: currentArray || [] // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    };
    console.log(`[INIT] –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è –∫–ª—é—á–∞ "${comparisonKey}"`);
  } else {
    compareWith = differencesMemory[comparisonKey].current || [];
    console.log(`[INIT] –ó–∞–≥—Ä—É–∂–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è –∫–ª—é—á–∞ "${comparisonKey}"`);
  }

  const current = currentArray || [];

  // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω originalObj, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –Ω–∏–º, –∏–Ω–∞—á–µ —Å —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
  //const compareWith = originalObj ? savedOriginal : differencesMemory[comparisonKey].current;

  // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
  const added = current.filter(obj =>
    !compareWith.some(saved => deepEqual(saved, obj))
  );

  const removed = compareWith.filter(obj =>
    !current.some(current => deepEqual(current, obj))
  );

  const timestamp = new Date().toISOString();

  if (added.length || removed.length) {
    const logEntry = {
      id: logId,
      timestamp,
      added,
      removed,
    };

    differencesMemory[comparisonKey].history.push(logEntry);
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    differencesMemory[comparisonKey].current = current;
    console.log('\n' + '='.repeat(50));
    console.log('üìä Memory State');
    console.log('='.repeat(50));
    console.log(`üîë Key: ${comparisonKey}`);
    console.log('\nüìú Original State:');
    console.log(JSON.stringify(differencesMemory[comparisonKey].original, null, 2));
    console.log('\nüîÑ Current State:');
    console.log(JSON.stringify(differencesMemory[comparisonKey].current, null, 2));
    console.log('\nüìö History:');
    console.log(JSON.stringify(differencesMemory[comparisonKey].history, null, 2));
    console.log('='.repeat(50) + '\n');

    console.log(`[LOG][${comparisonKey}] (${timestamp}) ID=${logId}`);
    
    if (added.length) {
        
        added.forEach((timeslot) => {
          let addedLog = `[LOG][${comparisonKey}] (${timestamp}) ID=${logId} ‚ûï Added timeslots:`;
            const fromDate = new Date(timeslot.from);
            const toDate = new Date(timeslot.to);
            const formattedFrom = `${fromDate.toLocaleDateString('ru-RU')} ${fromDate.toLocaleTimeString('ru-RU')}`;
            const formattedTo = `${toDate.toLocaleDateString('ru-RU')} ${toDate.toLocaleTimeString('ru-RU')}`;
            addedLog += ` –° ${formattedFrom} –ø–æ ${formattedTo}`;
            logToFile(addedLog);
        });
        
    }
    
    if (removed.length) {
        removed.forEach((timeslot) => {
          
        let removedLog = `[LOG][${comparisonKey}] (${timestamp}) ID=${logId} ‚ûñ Removed timeslots:`;
            const fromDate = new Date(timeslot.from);
            const toDate = new Date(timeslot.to);
            const formattedFrom = `${fromDate.toLocaleDateString('ru-RU')} ${fromDate.toLocaleTimeString('ru-RU')}`;
            const formattedTo = `${toDate.toLocaleDateString('ru-RU')} ${toDate.toLocaleTimeString('ru-RU')}`;
            removedLog += ` –° ${formattedFrom} –ø–æ ${formattedTo}`;
            logToFile(removedLog);
        });
    }
  }

  return { added, removed };
}

function resetMemory() {
  differencesMemory = {};
  logToFile('–ü–∞–º—è—Ç—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ª–∏—á–∏–π —Å–±—Ä–æ—à–µ–Ω–∞ / Memory for storing differences reset');
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç FBO —Ç–∞–π–º—Å–ª–æ—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–∞—Ç
 * Gets FBO timeslots for specified order within date range
 * 
 * @param {string} id - ID –∑–∞–∫–∞–∑–∞ / Order ID
 * @param {string} [from] - –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO (–Ω–∞–ø—Ä–∏–º–µ—Ä, '2024-01-01T00:00:00Z') / Start date in ISO format (e.g., '2024-01-01T00:00:00Z')
 * @param {string} [to] - –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO (–Ω–∞–ø—Ä–∏–º–µ—Ä, '2024-01-31T23:59:59Z') / End date in ISO format (e.g., '2024-01-31T23:59:59Z')
 * @returns {Promise<Object>} –û–±—ä–µ–∫—Ç —Å —Ç–∞–π–º—Å–ª–æ—Ç–∞–º–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ / Object with timeslots and timezone information
 * @throws {Error} –ï—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã apiKey –∏ clientId / If apiKey and clientId are not set
 * @throws {Error} –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω ID –∑–∞–∫–∞–∑–∞ / If order ID is not provided
 */
async function getTimeslotsByDateRange(id, from, to, callback) {
  if (!apiKey || !clientId) throw new Error('apiKey –∏ clientId –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã —á–µ—Ä–µ–∑ useApi –∏ useClientId / apiKey and clientId must be set using useApi and useClientId');
  if (!id) throw new Error('supply_order_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω / supply_order_id is required');

  const body = { supply_order_id: id };
  const res = await fetchImpl('https://api-seller.ozon.ru/v1/supply-order/timeslot/get', {
    method: 'POST',
    headers: {
      'Client-Id': clientId,
      'Api-Key': apiKey,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(body),
  });
  const data = await res.json();

  // –ï—Å–ª–∏ –Ω–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–∞—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Ç–∞–π–º—Å–ª–æ—Ç—ã
  if (!from && !to) {
    return data;
  }

  // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–∞–π–º—Å–ª–æ—Ç—ã –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã
  if (data.timeslots && data.timezone && data.timezone.length > 0) {
    const timezone = data.timezone[0];
    const offset = timezone.offset;
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞—Ç—ã —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã
    const fromDate = from ? new Date(from + offset) : null;
    const toDate = to ? new Date(to + offset) : null;

    data.timeslots = data.timeslots.filter(timeslot => {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã —Ç–∞–π–º—Å–ª–æ—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã
      const slotFrom = new Date(timeslot.from + offset);
      const slotTo = new Date(timeslot.to + offset);

      if (fromDate && slotTo < fromDate) return false;
      if (toDate && slotFrom > toDate) return false;
      return true;
    });
  }
  
  if (callback) callback(data);
  return data;
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç
const ozon = {
  useApi,
  useClientId,
  getSupplyOrderList,
  getTimeslotsForIds,
  compareTimeslotObjects,
  getTimeslotsByDateRange,
  resetMemory
};

module.exports = ozon; 